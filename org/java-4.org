#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-09-17 Thu 07:54>
#+TITLE: Java 字符串处理

一般程序需要处理大量文本数据，Java 语言的文本数据被保存为字符或字符串类型。关于字符及字符串的操作主要用到 String 类和 StringBuffer 类，如连接、修改、替换、比较和查找等。

#+BEGIN_QUOTE
字符串是 Java 程序中经常处理的对象之一，因此如果字符串运用得不好，将影响程序的运行效率。
#+END_QUOTE

** 定义字符串

字符串是 Java 中特殊的类，使用方法像一般的基本数据类型，被广泛应用在 Java 编程中。 *Java 没有内置的字符类型，而是在标准 Java 类库中提供了一个 =String= 类来创建和操作字符串。*

我们有两种方式定义字符串（如下），并且无论使用哪种形式创建字符串，字符串对象一旦被创建，其值是不能改变的，但可以使用其他变量重新赋值的方式进行更改。

_1. 直接定义字符串_

在 Java 中定义字符串最简单的方法是用双引号把它包围起来，这种用双引号括起来的一串字符实际上都是 String 对象，如字符串 ="Hello"= 在编译后即成为 String 对象。

#+BEGIN_SRC java -n
  String str1 = "Hello Java";
  // OR
  String str2;
  str = "Hello Java";             // 必须初始化哦
#+END_SRC

**注意：字符串变量必须经过初始化才能使用。*

_2. 使用 String 类定义_

前面提到在 Java 中每个双引号定义的字符串都是一个 String 类的对象，因此，可以通过使用 String 类的构造方法来创建字符串，该类位于 =java.lang= 包中。

String 类的构造方法有多种重载形式，每种形式都可以定义字符串。

#+BEGIN_EXPORT html
<note>
具有和类名相同的名称，而且没有返回类型的方法称为构造方法。重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。
</note>
#+END_EXPORT

_2.1 String()_

初始化一个新创建的 String 对象，表示一个空字符序列。

_2.2 String(String original)_

初始化一个新创建的 String 对象，使其表示一个与参数相同的字符序列。换句话说，新创建的字符串是该参数字符串的副本。

#+BEGIN_SRC java -n
String str1 = new String("Hello Java");
String str2 = new String(str1);
#+END_SRC

这里 =str1= 和 =str2= 的值是相等的。

_2.3 String(char[] value)_

分配一个新的字符串，将参数中的字符数组元素全部变为字符串。该字符数组的内容已被复制，后续对字符数组的修改不会影响新创建的字符串。例如：

#+BEGIN_SRC java -n
  char[] a = {'H', 'e', 'l', 'l', 'o'};
  String sChar = new String(a);
  a[1] = 's';                     // 对数组 a 中元素的更改并不会影响 sChar 的值（毕竟是拷贝了）
#+END_SRC

_2.4 String(char[] value, int offset, int count)_

分配一个新的 String ，它包含来自该字符数组参数一个子数组的字符。 =offset= 参数是子数组第一个字符的索引， =count= 参数指定子数组的长度。该子数组的内容已被赋值，后续对字符数组的修改不会影响新创建的字符串。例如：

#+BEGIN_SRC java -n
  char[] a = {'H', 'e', 'l', 'l', 'o'};
  String sChar = new String(a, 1, 4); // → "ello"
  a[1] = 's';                         // 对 sChar 的值也没有任何影响
#+END_SRC

** String 和 int 的相互转换

String 在编程中被广泛使用，所以掌握 String 和 int 的相互转换方法是极其重要的。

_1. String 转换为 int_

String 字符串转整型 int 有以下两种方式：
- =Integer.parseInt(str)=
- =Integer.valueOf(str).intValue()=

#+BEGIN_QUOTE
*注：Integer 是一个类，是 int 基本数据类型的封装类。
#+END_QUOTE

在 String 转换 int 时，String 的值一定是整数，否则会报数字转换异常（ =java.lang.NumberFormatException= ）。

_2. int 转换为 String_

整型 int 转 String 字符串类型有以下 3 种方法：
- =String s = String.valueOf(i);= ，注意 =valueOf= 括号中的值不能为空，否则会报空指针异常；
- =String s = Integer.toString(i);= ；
- =String s = "" + i;= ，相对耗时较大。

_3. valueOf()、parse() 和 toString()_

_3.1 valueOf()_

*=valueOf()= 方法将数据的内部格式转换为可读的形式。*

它是一种静态方法，对于所有 Java 内置的类型，在字符串内被重载，以便每一种类型都能被转换成字符串。 =valueOf()= 方法还被 Object 重载，所以创建的任何形式类的对象也可被用作一个参数。

以下为 =valueOf= 的几种形式：
#+BEGIN_EXAMPLE
- static String valueOf(double num)
- static String valueOf(long num)
- static String valueOf(Object obj)
- static String valueOf(char[] chars)
#+END_EXAMPLE

对各种数据类型，可以直接调用 =valueOf()= 方法得到合理的字符串形式：
- 所的有简单类型数据转换成相应于它们的普通字符串形式；
- 任何传递给该方法的对象都将返回对象的 =toString()= 方法调用的结果。

#+BEGIN_QUOTE
事实上，也可以直接调用 =toString()= 方法而得到相同的结果。
#+END_QUOTE

对大多数数组， =valueOf()= 方法返回一个相当晦涩的字符串，说明它是一个某种类型的数组。然而，对于字符数组，它创建一个包含了字符数组中的字符的字符串对象。

#+BEGIN_EXPORT html
<essay>
字符串，无疑是很重要的，毕竟数字之上就是它了，然而这些稀奇古怪的方法却不用太在意的，只需要掌握一种通用的性能较好的就可以了，关键在于理解它们在编译器和内存中所作的动作。
</essay>
#+END_EXPORT

_3.2 parse()_

=parseXxx(String)= 这种形式，是指把字符串转换为数值型，其中 =Xxx= 对应不同的数据类型，如 =int= 型和 =float= 型。

_3.3 toString()_

=toString()= 可以把一个引用类型转换为 String 字符串类型，是 sun 公司开发 Java 的时候为了方便所有类的字符串操作而特意加入的一个方法。

** 字符串拼接

通过字符串连接，可以将两个或多个字符串、字符、整数和浮点数等类型的数据连成一个更大的字符，String 字符串拼接可以使用 =+= 运算符或 String 的 =concat(String str)= 方法。

*注： =+=  运算符的优势是可以连接任何类型数据拼接为字符串，而 =concat= 方法只能拼接 String 类型字符串。

_1. 使用连接运算符 =+=_

=+= 运算符是最简单、最快捷，也是使用最多的字符串连接方式。

*注：在使用 =+= 运算符连接字符串和 int 型（或 double 型）数据时，会自动将它们转换成 String 类型。

_2. 使用 =concat()= 方法_

在 java 中，String 类的 =concat()= 方法实现了将一个字符串连接到另一个字符串的后面。语法格式如下：

#+BEGIN_EXAMPLE
str1.concat(str2)
#+END_EXAMPLE

*注： =concat()= 方法一次只能连接两个字符串，如果需要连接多个字符串，需要调用多次 =concat()= 方法。

_3. 连接其他类型数据_

字符串也可同其他基本数据类型进行连接，如果将字符串同这些数据类型数据进行连接，此时会将这些数据直接转换成字符串。

*注：只要 =+= 运算符的一个操作数是字符串，编译器就会将另一个操作数转换成字符串形式，所以应该谨慎地将其他数据类型与字符串相连，以免出现意想不到的结果。

** 字符串的若干操作

*** 获取字符串长度

在 Java 中，要获取字符串的长度，可以使用 String 类的 =length()= 方法，其语法形式如下：

#+BEGIN_EXAMPLE
字符串名.length();
#+END_EXAMPLE

*** 字符串的大小写转换

String 类的 =toLowerCase()= 方法可以将字符串中的所有字符全部转换成小写，而非字母的字符不受影响。语法格式如下：

#+BEGIN_EXAMPLE
字符串名.toLowerCase();
#+END_EXAMPLE

=toUpperCase()= 则将字符串中的所有字符全部转换成大写，而非字母的字符不受影响。语法格式如下：

#+BEGIN_EXAMPLE
字符串名.toUpperCase();
#+END_EXAMPLE

*** 去除字符串中的空格

字符串中存在的首尾空格一般情况下都没有任何意义，如字符串 =“ Hello ”= ，但是这些空格会影响到字符串的操作，如连接字符串或比较字符串等，所以应该去掉字符串中的首尾空格，这需要使用 String 类提供的 =trim()= 方法。语法格式如下：

#+BEGIN_EXAMPLE
字符串名.trim();
#+END_EXAMPLE

*注：如果不确定要操作的字符串首尾是否有空格，最好在操作之前调用该字符串的 =trim()= 方法去除首尾空格，然后再对其进行操作。

*** 截取子字符串

形式如下：

#+BEGIN_EXAMPLE
字符串名.substring(int beginIndex[, int endIndex]);
#+END_EXAMPLE

其中：
- =beginIndex= 表示截取的起始索引，截取的字符串中 *包括* 起始索引对应的字符；
- =endIndex= 表示结束索引，截取的字符串中 *不包括* 结束索引对应的字符；
- 如果不指定 =endIndex= ，则表示截取到目标字符串末尾。

*注： =substring()= 方法是按字符截取，而不是按字节截取。

*** 分割字符串

String 类的 =split()= 方法可以按指定的分割符对目标字符串进行分割，分割后的内容存放在字符串数组中。该方法主要有以下两种重载形式：

#+BEGIN_EXAMPLE
str.split(String sign)
str.split(String sign, int limit)
#+END_EXAMPLE

其中：
- =str= 为需要分割的目标字符串；
- =sign= 为指定的分割符，可以是任意字符串；
- =limit= 表示分割后生成的字符串的限制个数，如果不指定，则表示不限制，直到将整个目标字符串完全分割为止。

使用分隔符需要注意：
- =.= 和 =|=  都是转义字符，必须得加 =\\= ；
- 如果在一个字符串中有多个分隔符，可以用 =|= 作为连字符，如要把 ~acount=? and uu=? or n=?~ 分隔出来，可以用 =String.split("and|or")= 。

*** 字符串的替换

_1. replace()_

=replace()= 方法用于将目标字符串中的指定字符（串）替换成新的字符（串），语法格式如下：

#+BEGIN_EXAMPLE
字符串.replace(String oldChar, String newChar);
#+END_EXAMPLE

其中：
- oldChar 表示被替换的字符串；
- newChar 表示用于替换的字符串。

*注： =replace()= 方法会将字符串中所有 =oldChar= 替换成 =newChar= 。

_2. replaceFirst()_

=replaceFirst()= 方法将目标字符串中匹配某正则表达式的第一个字条串替换成新的字符串，语法格式如下：

#+BEGIN_EXAMPLE
字符串.replaceFirst(String regex, String replacement);
#+END_EXAMPLE

_3. replaceAll()_

=replaceAll()= 方法用于将目标字符串匹配某正则表达式的所有子字符串替换成新的字符串，语法格式如下：

#+BEGIN_EXAMPLE
字符串.replaceAll(String regex, String replacement);
#+END_EXAMPLE

#+BEGIN_EXPORT html
<essay>
正则表达式，以后专题再说……
</essay>
#+END_EXPORT

*** 字符串比较

字符串比较是常见的操作，包括比较相等、大小、前缀和后缀等。

在 Java 中，比较字符串的常用方法有 3 个： =equals()= 方法、 =equalsIgnoreCase()= 方法、 =compareTo()= 方法。

_1. equals()_

=equals()= 方法将逐个地比较两个字符串的每个字符是否相同（大小写也在检查范围之内），语法格式如下：

#+BEGIN_EXAMPLE
str1.equals(str2);
#+END_EXAMPLE

当相等时，返回 =true= ，否则返回 =false= 。

_2. equalsIgnoreCase()_

=equalsIgnoreCase()= 方法的作用和语法与 equals() 方法完全相同，唯一不同的是 =equalsIgnoreCase()= 比较时 *不区分大小写* 。

_3. equals() 与 == 的比较_

理解 =equals()= 方法和 ~==~ 运算符执行的是两个不同的操作是重要的：
- =equals()= 方法比较字符串对象中的字符；
- ~==~ 运算符比较两个对象引用看它们是否引用相同的实例。
