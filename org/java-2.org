#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-09-15 Tue 07:30>
#+TITLE: Java 程序设计基础

一个 Java 程序通常由数据类型、变量、运算符和控制流程语句 4 部分组成，其中数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作；变量是用来存储指定类型的数据，其值在程序运行期间是可变的；与变量对应的是常量，其值是固定的。

** 标识符和关键字

任何一种计算机语言都离不开标识符和关键字。

*** 标识符

Java 中标识符是为方法、变量或其他用户定义项所定义的名称，标识符可以有一个或多个字符。

在 Java 语言中，标识符的构成规则如下：
- 标识符由数字（ =0~9= ）和字母（ =A~Z a~z= ）、美元符号 =$= 、下划线（ =_= ）以及 Unicode 字符集中符号大于 =0xC0= 的所有符号组合构成（各符号之间没有空格）；
- 标识符的第一个符号为字母、下划线和美元符号，后面可以是任何字母、数字、美元符号或下划线；
- 区分大小写。

#+BEGIN_QUOTE
*注：标识符命名时，切记不能以数字开头，也不能使用任何 Java 关键字作为标识符，而且不能赋予标识符任何标准的方法名。
#+END_QUOTE

标识符分为两类，分别为关键字和用户自定义标识符：
- 关键字是有特殊含义的标识符，如 =true、false= 表示逻辑的真假；
- 用户自定义标识符是由用户标识符构成规则生成的非保留字的标识符。

*注：标识符不能与关键字重名。

标识符用来命名常量、变量、类和类的对象等，因此，一个良好的编程习惯要求命名标识符时，应赋予它一个意义或有用途的名字。

*** 关键字

关键字（或者保留字）是对编译器有特殊意义的固定单词，不能在程序中做其他目的使用。它们用来表示一种数据类型，或者表示程序的结构等。

#+BEGIN_QUOTE
保留字是为 Java 预留的关键字，它们虽然现在没有作为关键字，在以后的升级版本中可能作为关键字。
#+END_QUOTE

Java 语言目前定义了 51 个关键字，这些关键字不能作为变量名、类名和方法名来使用，以下对这些关键字进行了分类：
| 数据类型 | boolean、int、long、short、byte、float、double、char、class、interface                                       |
| 流程控制 | if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally                |
| 修饰符   | public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native |
| 动作     | package、import、throw、throws、extends、implements、this、super、instanceof、new                            |
| 保留字   | true、false、null、goto、const                                                                               |

** 注释

注释是对程序语言的说明，有助于开发者和用户之间的交流，方便理解程序。注释不是编程语句，因此被编译器忽略。

_单行注释_ ，以双斜杠 =//= 标识，只能注释一行内容，用在注释信息内容少的地方。

_多行注释_ ，包含在 =/*= 和 =*/= 之间，能注释很多行的内容。注意：多行注释可以嵌套单行注释，但是不能嵌套多行注释和文档注释。

_文档注释_ ，包含在 =/**= 和 =*/= 之间，也能注释多行内容，一般用在类、方法和变量上面，用来描述其作用。注释后，鼠标放在类和变量上面会自动显示出我们注释的内容。

文档注释可以通过 =javadoc= 命令把文档注释中的内容生成文档，并输出到 HTML 文件中，方便记录程序信息。还可以包含一个或多个 =@= 标签，每个 =@= 标签都在新的一行开始。

在 Java 中，一行注释以双斜杠 =//= 标识；多行注释包含在 =/*= 和 =*/= 之间；文档注释包含在 =/**= 和 =*/= 之间。

当编译器执行到 =//= 时，就会忽略该行 =//= 之后的所有文本；当执行到 =/*= 时，会扫描下一个 =*/= 并忽略 =/*= 和 =*/= 之间的任何文本；当执行到 =/**= 时，也会扫描下一个 =*/= 并忽略 =/**= 和 =*/= 之间的任何文本内容。

** TODO Javadoc 文档注释

...

** 常量

常量是指在程序的整个运行过程中值保持不变的量。

#+BEGIN_QUOTE
*注意：常量和常量值是不同的概念，常量值是常量的具体和直观的表现形式，常量是形式化的表现。常在程序中既可以直接使用常量值，也可以使用常量。
#+END_QUOTE

#+BEGIN_EXPORT html
<essay>
说得很绕，其实没什么用……
</essay>
#+END_EXPORT

*** 常量值

常量值又称为字面常量，它是通过数据直接表示，如整型、字符串等。

_1. 整型常量值_

#+CAPTION: Java 的整型常量值主要形式
| 十进制数形式   |                      | =54、-67、0=   |
| 八进制数形式   | 以 =0= 开头          | =0125、-013=   |
| 十六进制数形式 | 以 =0x= 或 =0X= 开头 | =0x100、-0x16= |

整型（ =int= ）常量默认在内存中占 32 位，是具有整数类型的值，当运算过程中所需值超过 32 位长度时，可以把它表示为长整型（ =long= ）数值，通过在数字后面加 =L、l= 表示，如 =697L= ，它在内存中占 64 位。

_2. 实型常量值_

#+CAPTION: Java 的实型常量值主要形式
| 十进制数形式   | 由数字和小数点组成，且必须有小数点                 | =12.34、-98.0=  |
| 科学计数法形式 | 其中 =e、E= 之前必须有数字，且之后的数字必须为整数 | =1.75e5、32&E3= |

Java 实型常量默认在内存中占 64 位，是具有双精度型（ =double= ）的值。

如果考虑到需要节省运行时的系统资源，而运行时的数据值取值范围并不大且运算精度要求不太高的情况，可以把它表示为单精度型（ =float= ）的数值。

单精度型数值一般要在该常数后面加 =F、f= ，如 =67.9f= ，表示一个 =float= 型实数，它在内存中占 32 位（取决于系统的版本高低）。

_3. 布尔型常量值_

Java 的布尔型常量只有两个值，即 =false= （假）和 =true= （真）。

_4. 字符型和字符串常量值_

Java 的字符型常量值是用单引号引起来的一个字符，如 ='e'、'E'= 。

#+BEGIN_QUOTE
*注意： *Java 字符串常量值中的单引号和双引号不可混用* ，双引号用来表示字符串，像 ="11"、"d"= 等都是表示单个字符的字符串。
#+END_QUOTE

除了以上所述形式的字符常量值之外，Java 还允许使用一种特殊形式的字符常量值来表示一些难以用一般字符表示的字符，这种特殊形式的字符是经开头的字符序列，称为 _转义字符_ 。

#+CAPTION: Java 中常用的转义字符
| 转义字符 | 说明                         |
|----------+------------------------------|
| =\ddd=   | 1~3 位八进制数所表示的字符   |
| =\uxxxx= | 1~4 位十六进制数所表示的字符 |
| =\'=     | 单引号字符                   |
| =\"=     | 双引号字符                   |
| =\\=     | 双斜杠字符                   |
| =\r=     | 回车                         |
| =\n=     | 换行                         |
| =\b=     | 退格                         |
| =\t=     | 横向跳格                     |

*** 定义常量

常量不同于常量值，它可以在程序中用符号来代替常量值使用，因此在使用前必须先定义。在声明常量的同时要赋予一个初始值，常量一旦初始化就不可以被修改。

Java 语言中使用 =final= 关键字来定义一个常量，其语法如下所示：

#+BEGIN_EXAMPLE
final dataType variableName = value
#+END_EXAMPLE

其中， =final= 是定义常量的关键字， =dataType= 指明常量的数据类型， =variableName= 是变量的名称， =value= 是初始值。

=final= 关键字表示是最终的，它可以修改很多元素，修饰变量就变成了常量。常量有三种类型：静态常量、成员常量和局部常量。来看个例子吧：

#+BEGIN_SRC java -n
  public class HelloWorld {
      // 静态常量
      public static final double PI = 3.14;
      // 声明成员常量
      final int y = 10;

      public static void main(String[] args) {
          // 声明局部常量
          final double x = 3.3;
      }
  }
#+END_SRC

我们来稍微分析一下上面这段代码吧。

代码第 3 行的是声明静态常量，使用在 =final= 之前用 =public static= 修饰。 =public static= 修饰的常量作用域是全局的，不需要创建对象就可以访问它，在类外部访问形式为 =HelloWorld.PI= ；代码第 5 行声明成员常量，作用域类似于成员变量，但不能修改；代码第 9 行声明局部常量，作用域类似于局部变量，但不能修改。

在定义常量时，需要注意如下内容：
- 在定义常量时就需要对该常量进行初始化；
- =final= 关键字不仅可以用来修饰基本数据类型的常量，还可以用来修饰对象的引用或者方法；
- 为了与变量区别，常量取名一般都用大写字符。

当常量被设定后，一般情况下不允许再进行更改，如果更改其值将提示错误。

#+BEGIN_EXPORT html
<essay>
常量（constant）是程序中使用的一个确定数值，在汇编阶段就可以确定，直接编码于指令代码中，不是保存在存储器中可变的变量，因为是编码在指令中的量，和指令一起存储了，所以不用单独开辟主存空间，所以也就没法动态改变它了，这也正是高级语言常量无法修改的原因。
</essay>
#+END_EXPORT

** 变量

Java 语言是强类型（Strongly Typed）语言，强类型包含以下两方面的含义：
- 所有的变量必须先声明、后使用；
- 指定类型的变量只能接受类型与之匹配的值。

这意味着 *每个变量和每个表达式都有一个在编译时就确定的类型* ，类型限制了一个变量能被赋的值，限制了一个表达式可以产生的值，限制了在这些值上可以进行的操作，并确定了这些操作的含义。

常量和变量是 Java 程序中最基础的两个元素，常量的值是不能被修改的，而变量的值在程序运行期间可以被修改。

*** 声明变量

对开发人员来说，变量是用来描述一条信息的别名，可以在程序代码中使用一个或多个变量。其基本语法如下：

#+BEGIN_EXAMPLE
// 声明变量
DataType identifier;
// 声明变量并赋值
DataType identifier = value;
#+END_EXAMPLE

其中：
- =DataType= ：变量类型，如 =int、string、char、double= 等；
- =identifier= ：标识符，也叫变量名称；
- =value= ：声明变量时的值。

来看一段实例代码吧。

#+BEGIN_SRC java -n
  String employee;                // String 类型的变量
  boolean isSave;                 // boolean 类型的变量
  int create_at;                  // int 类型的变量
#+END_SRC

*** 变量赋值

初始化变量是为变量指定一个明确的初始值。初始化变量有两种方式：一种是声明时直接赋值，另一种是先声明、后赋值。另外，多个类型的变量可以同时定义或者初始化，但是多个变量中间要使用逗号分隔，声明结束时用分号分隔。

#+BEGIN_EXPORT html
<essay>
老规矩，看代码。
</essay>
#+END_EXPORT

#+BEGIN_SRC java -n
  // 声明并赋值
  char usersex = '女';

  // 先声明，后赋值
  String username;
  username = "小明";

  // 声明多个变量
  String username, address, phone, tel;
  // 声明并初始化多个变量
  int num1 = 12, num2 = 23, result = 35;
#+END_SRC

Java 中初始化变量时需要注意以下事项：
- 变量是类或者结构中的字段，如果没有显示地初始化，默认状态下创建变量并默认初始值为 0 ；
- 方法中的变量必须显式地初始化，否则在使用该变量时就会出错。

*** 变量作用域

变量的作用域规定了变量所能使用的范围，只有在作用域内变量才能被使用。根据变量声明地点的不同，变量的作用域也不同。

*根据作用域的不同，一般将变量分为不同的类型：成员变量和局部变量。*

_1. 成员变量_

Java 的成员变量有两种，分别是 _全局变量和静态变量_ （类变量）。 *定义在方法体和语句块之外* ，不属于任何一个方法，作用域是整个类。

| 名称                 | 修饰             | 访问                             | 生命周期                                                           |
|----------------------+------------------+----------------------------------+--------------------------------------------------------------------|
| 全局变量（实例变量） | 无 =static= 修饰 | =对象名.变量名=                  | 只要对象被当作引用，实例变量就将存在                               |
| 静态变量（类变量）   | 用 =static= 修饰 | =类名.变量名= 或 =对象名.变量名= | 其生命周期取决于类的生命周期，类被垃圾回收机制彻底回收时才会被销毁 |

_2. 局部变量_

_局部变量_ 是指在方法或者方法代码块中定义的变量，其作用域是其所在的代码块。可分为以下三种：
- 方法参数变量（形参）：在整个方法内有效；
- 方法局部变量（方法内定义）：从定义这个变量开始到方法结束这一段时间内有效；
- 代码块局部变量（代码块内定义）：从定义这个变量开始到代码块结束这一段时间内有效。

*局部变量在使用前必须被程序员主动初始化值。*

** 数据类型

Java 语言支持的数据类型分为两种：基本数据类型（Primitive Type）和引用数据类型（Reference Type）。

*** 基本数据类型

#+CAPTION: Java 的基本数据类型
| 类型名称     | 关键字    | 占用内存（字节） | 取值范围                                   |
|              |           | <c>              |                                            |
|--------------+-----------+------------------+--------------------------------------------|
| 字节型       | =byte=    | 1                | -128~127                                   |
| 短整型       | =short=   | 2                | -32768~32767                               |
| 整型         | =int=     | 4                | -2147483648~2147483647                     |
| 长整型       | =long=    | 8                | -9223372036854775808L~9223372036854775807L |
|--------------+-----------+------------------+--------------------------------------------|
| 单精度浮点型 | =float=   | 4                | +/-3.4E+38F（6~7 个有效位）                |
| 双精度浮点型 | =double=  | 8                | +/-1.8E+308 (15 个有效位）                 |
|--------------+-----------+------------------+--------------------------------------------|
| 字符型       | =char=    | 2                | ISO 单一字符集                             |
|--------------+-----------+------------------+--------------------------------------------|
| 布尔型       | =boolean= | 1                | true 或 false                              |

*提示： =char= 代表字符型，实际上字符型也是一种整数类型，相当于无符号整数的类型。
