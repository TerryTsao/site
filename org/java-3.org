#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-09-16 Wed 17:23>
#+TITLE: Java 流程控制语句

从结构化程序设计角度出发，程序有 3 种结构：顺序结构、选择结构和循环结构。

若是在程序中没有给出特别的执行目标，系统则默认自上而下一行一行地执行程序，这类程序的结构就称为 _顺序结构_ 。

** Java 语句

按照语句的组成部分，可以将顺序结构中语句分为 3 大类：表达式语句、空语句和复合语句。

*在 Java 中，语句是最小的组成单位，每个语句必须使用分号作为结束符。* 除此这外，Java 对语句无任何其他限制。

_1. 空语句_

所谓空语句（Empty Statement），它在程序中什么都不做，也不包含具有实际性的语句。在程序中，空语句主要用来作为空循环体。格式如下：

#+BEGIN_SRC java -n
  ;                               // 其实就是一个分号
#+END_SRC

_2. 表达式语句_

以下是一些表达式的示例语句：
#+BEGIN_SRC java -n
  3.1415926;
  (a+b)/2;
  x*y*z-y+(20-x);
#+END_SRC

这些表达式能够被 Java 编译器识别，但是由于没有对程序进行任何操作，因此无任何意义。

一般表达式语句应该能完成一个操作，如修改变量的值或作为函数参数等。具体方法是，在表达式的左侧指定一个变量来存储表达式的值，或者将表达式传递给函数。

#+BEGIN_SRC java -n
  pi = 3.1415926;
  output(pi);                      // 将pi的值传递到output()函数中作为参数
  sum = (a + b) / 2;
  printf("%f", sum);               // 将sum的值传递到printf()函数输出
  temp = x * y * z - y + (20 - x); // 将表达式的值保存到temp变量中
#+END_SRC

_3. 复合语句_

复合语句又称为语句块，是很多个语句的组合，从而可以将多个语句看作单个语句。格式如下：

#+BEGIN_EXAMPLE
  {
      statement-list  // 语句列表
  }
#+END_EXAMPLE

其中， =statement-list= 是由一个或多个语句组成的列表，如果不存在 =statement-list= ，则称该语句是空的。

** 选择结构

i.e. 分支结构

Java 支持两种选择语句： =if= 语句和 =switch= 语句。其中 =if= 语句使用布尔表达式或布尔值作为分支条件来进行分支控制，而 =switch= 语句则用于对多个整型值进行匹配，从而实现分支控制。这些语句允许你只有在程序运行时才能知道其状态的情况下，控制程序的执行过程。

选择结构（也叫分支结构）解决了顺序结构不能判断的缺点，可以根据一个条件执行哪些语句块。

