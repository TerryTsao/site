#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-12-01 Tue 22:16>
#+TITLE: DOM

#+BEGIN_EXAMPLE
本章内容：
- 理解包含不同层次节点的 DOM
- 使用不同的节点类型
- 克服浏览器兼容性问题及各种陷阱
#+END_EXAMPLE

_DOM（文档对象模型）_ 是针对 HTML 和 XML 文档的一个 API（应用程序编程接口），它描述了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。

#+BEGIN_EXPORT html
<note>
IE 中所有的 DOM 对象都是以 COM 对象的形式实现的，这意味着 IE 中的 DOM 对象与原生 JavaScript 对象的行为或活动特点并不一致。
</note>
#+END_EXPORT

** 节点层次

DOM 可以将任何 HTML 或 XML 文档描绘成一个由多层节点构成的结构：
- 节点分为几种不同的类型，每种类型分别表示文档中不同的信息及（或）标记；
- 每个节点都拥有各自的特点、数据和方法，另外也与其他节点存在某种关系；
- 节点之间的关系构成了层次，而所有页面标记则表现为 *一个以特定节点为根节点的树形结构* 。

以下面的 HTMl 为例：

#+BEGIN_SRC html -n
  <html>
    <head>
      <title>Sample Page</title>
    </head>
    <body>
      <p>Hello World!</p>
    </body>
  </html>
#+END_SRC

将这个简单的 HTML 文档表示为一个层次结构，如右下图：

#+BEGIN_EXPORT html
<img
src="/images/dom-1.png"
width="400"
height=""
style="float: right; margin-left: 8px;"
title=""
/>
#+END_EXPORT

*文档节点是每个文档的根节点。*

本例中，文档节点只有一个子节点，即 =<html>= 元素，称之为 _文档元素_ 。
- *文档元素是文档的最外层元素* ，文档中的其他所有元素都包含在文档元素中；
- *每个文档只能有一个文档元素* 。

在 HTML 页面中，文档元素始终都是 =<html>= 元素；在 XML 中，没有预定义的元素，因些任何元素都可能成为文档元素。

*每一段标记都可以通过树中的一个节点来表示* ，总共有 12 种节点类型，这些节点类型都继承处一个基类型。

#+BEGIN_EXPORT html
<essay>
让我们来逐个认识一下这 12 种节点类型吧！
</essay>
#+END_EXPORT

** 1. Node 类型

DOM1 级定义了一个 Node 接口，该接口将 *由 DOM 中的所有节点类型实现* 。

这个 Node 接口在 JavaScript 中是作为 Node 类型实现的，JavaScript 中的所有节点类型都继承自 Node 类型，因此所有节点类型都共享着相同的基本属性和方法。

#+BEGIN_QUOTE
除了 IE 之外，在其他所有浏览器都可以访问到这个类型。
#+END_QUOTE

每个节点都有一个 =nodeType= 属性，用于表明节点的类型。

节点类型由在 Node 类型中定义的下列 12 个数值常量来表示 ，任何节点类型必居其一：

#+BEGIN_EXAMPLE
- Node.ELEMENT_NODE(1)
- Node.ATTRIBUTE_NODE(2)
- Node.TEXT_NODE(3)
- Node.CDATA_SECTION_NODE(4)
- Node.ENTITY_REFERENCE_NODE(5)
- Node.ENTITY_NODE(6)
- Node.PROCESSING_INSTRUCTION_NODE(7)
- Node.COMMENT_NODE(8)
- Node.DOCUMENT_NODE(9)
- Node.DOCUMENT_TYPE_NODE(10)
- Node.DOCUMENT_FRAGMENT_NODE(11)
- Node.NOTATION_NODE(12)
#+END_EXAMPLE

\*注：并不是所有节点类型都受到 Web 浏览器的支持，开发人员最常用的就是 *元素和文本节点* 。

通过比较上面这些常量，可以很容易地确定节点的类型，如：

#+BEGIN_SRC js -n
  // if (someNode.nodeType == Node.ELEMENT_NODE) {  // 在 IE 中无效（IE 没有公开 Node 类型的构造函数）
  if (someNode.nodeType == 1) {                     // 兼容 IE ，适用于所有浏览器
      alert('Node is an element.');
  }
#+END_SRC

*** nodeName 和 nodeValue 属性

要了解节点的具体信息，可以使用 =nodeName= 和 =nodeValue= 这两个属性，这两个属性的值完全取决于节点的类型。

*注：在使用这两个值以前，最好是先检测一下节点的类型。

#+BEGIN_SRC js -n
  if (someNode.nodeType == 1) {
      value = someNode.nodeName;  // nodeName 的值是元素的标签名
  }
#+END_SRC

对于元素节点， =nodeName= 中保存的始终都是元素的标签名，而 =nodeValue= 的值则始终为 =null= 。

*** 节点关系

文档中所有的节点之间都存在这样或那样的关系。节点间的各种关系可以用传统的家庭关系来描述，相当于把文档树比喻成家谱。

每个节点都有一个 =childNodes= 属性，其中保存着一个 =NodeList= 对象。

=NodeList= 是一种类数组对象，用于保存一组有序的节点，可以通过位置来访问这些节点。

#+BEGIN_QUOTE
什么是类数组对象？

请注意，我们虽然可以通过方括号语法来访问 =NodeList= 的值，而且这个对象也有 =length= 属性，但它并不是 Array 的实例。
#+END_QUOTE

=NodeList= 对象的独特之处在于，它实际上是基于 DOM 结构 *动态执行查询的结果* ，因此 DOM 结构的变化能够自动反映在 =NodeList= 对象中。
