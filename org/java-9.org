#+SETUPFILE: ../theme-rose.setup
#+DATE: <2020-09-26 Sat 11:27>
#+TITLE: 继承和多态

继承机制的使用可以复用一些定义好的类，减少重复代码的编写。多态机制可以动态调整对象的调用，降低对象之间的依存关系。

** 封装

封装将类的某个信息隐藏在类内部，不允许外部程序直接访问，只能通过该类提供的方法来实现对隐藏信息的操作和访问。

#+BEGIN_QUOTE
例如：一台计算机内部极其复杂，有主板、CPU、硬盘和内存，而一般用户不需要了解它的内部细节，不需要知道主板的型号、CPU 主频、硬盘和内存的大小，于是计算机制造商将用机箱把计算机封装起来，对外提供了一些接口，如鼠标、键盘和显示器等，方便用户使用计算机。
#+END_QUOTE

封装的特点：
- 只能通过规定的方法访问数据；
- 隐藏类的实例细节，方便修改和实现。

实现封装的具体步骤如下：
1. 修改属性的可见性来限制对属性的访问，一般设为 =private= ；
2. 为每个属性创建一对赋值（ =setter= ）方法和取值（ =getter= ）方法，一般设为 =public= ，用于属性的读写；
3. 在赋值和取值方法中，加入属性控制语句（对属性值的合法性进行判断）。

下面我们来看一个完整的例子，要求编写表示图书的 =Book= 类，实现以下需求：
- 基本信息包括图书名称（ =bookName= ）、总页数（ =bookTotalNum= ），其中页数不能少于 200 页，否则输出错误信息，并赋予默认值 200 ；
- 为各个属性设置赋值和取值方法；
- 具有 =details()= 方法，该方法在控制台输出每本图书的名称和总页数。

编写 =BookTest= 测试类，为 =Book= 对象的属性赋予初始值，并调用 =details()= 方法输出详细信息。

#+BEGIN_SRC java -n
  public class Book {
      private String bookName;
      private int bookTotalNum;

      public String getBookName() {
          return bookName;
      }
      public void setBookName(String bookName) {
          this.bookName = bookName;
      }

      public int getBookTotalNum() {
          return bookTotalNum
      }
      public void setBookTotalNum(int bookTotalNum) {
          if (bookTotalNum < 200) {
              System.out.println(this.bookName + "这本书的页数不能少于 200 页");
              this.bookTotalNum = 200;
          } else {
              this.bookTotalNum = bookTotalNum;
          }
      }

      public void details() {
          System.out.println(this.bookName + "这本书的总页数是：" + this.bookTotalNum);
      }
  }
#+END_SRC

测试类如下：

#+BEGIN_SRC java -n
  public class BookTest {
      public static void main(String[] args) {
          Book book1 = new Book();
          book1.setBookName("《红与黑》");
          book1.setBookTotalNum(190);
          book1.details();
          System.out.println("**********************");
          Book book2 = new Book();
          book2.setBookName("《格林童话》");
          book2.setBookTotalNum(520);
          book2.details();
      }
  }
#+END_SRC

代码执行结果如下：

#+BEGIN_EXAMPLE
  《红与黑》这本书的页数不能少于 200 页
  《红与黑》这本书的总页数是：200
  ,************************************
  《格林童话》这本书的总页数是：520
#+END_EXAMPLE

** 继承

Java 中的继承就是在已经存在类的基础上进行扩展，从而产生新的类。已经存在的类称为 _父类、基类或超类_ ，而新产生的类称为 _子类或派生类_ 。在子类中，不仅包含父类的属性和方法，还可以增加新的属性和方法。

Java 中子类继承父类的语法格式如下：

#+BEGIN_EXAMPLE
  修饰符 class class_name extends extend_class {
         //  类的主体
  }
#+END_EXAMPLE

其中， =class_name= 表示子类（派生类）的名称； =extend_class= 表示父类（基类）的名称； =extends= 关键字直接跟在子类名之后，其后面是该类要继承的父类的名称。

#+BEGIN_QUOTE
Java 与 C++ 定义继承类的方式十分相似。Java 用关键字 =extends= 代替了 C++ 中的冒号（ =：= ）。在 Java 中，所有的继承都是公有继承， 而没有 C++ 中的私有继承和保护继承。
#+END_QUOTE

类的继承不改变类成员的访问权限，也就是说，如果父类的成员是公有的、被保护的或默认的，它的子类仍具有相应的这些特性，并且子类不能获得父类的构造方法。

**注：如果父类中存在有参的构造方法而并没有重载无参的构造方法，那么在子类中必须含有有参的构造方法。因为如果在子类中不含有构造方法，默认会调用父类中无参的构造方法，而在父类中并没有无参的构造方法，因此会出错。*

*** 单继承

Java 语言摒弃了 C++ 中难以理解的多继承特征，即 Java 不支持多继承，只允许一个类直接继承另一个类，即子类只能有一个直接父类， =extends= 关键字后面只能有一个类名。

如果定义一个 Java 类时并未显示指定这个类的直接父类，则这个类默认继承 =java.lang.Object= 类。

使用继承的注意点：
- 子类一般比父类包含更多的属性和方法；
- 父类中的 =private= 成员在子类中是不可见的，因此在子类中不能直接使用它们；
- 父类和其子类间必须存在“是一个”即 =is-a= 的关系，否则不能用继承；
- Java 只允许单一继承。

在面向对象语言中，继承是必不可少的、非常优秀的语言机制，它有如下优点：
- 实现代码共享，减少创建类的工作量，使子类可以拥有父类的方法和属性；
- 提高代码维护性和可重用性；
- 提高代码的可扩展性，更好的实现父类的方法。

所有事物有其好的一面，也有其不好的一面，继承的缺点如下：
- 继承是侵入性的，只要继承，就必须拥有父类的属性和方法；
- 降低代码灵活性，子类拥有父类的属性和方法后多了些约束；
- 增强代码耦合性（ *开发项目的原则为高内聚低耦合* ），当父类的常量、变量和方法被修改时，需要考虑子类的修改，有可能导致大段的代码重构。

*** super

由于子类不能继承父类的构造方法，因此，如果要调用父类的构造方法，可以使用 =super= 关键字。 =super= 可以用来访问父类的构造方法、普通方法和属性。

=super= 关键字的功能：
- 在子类的构造方法中显示的调用父类构造方法；
- 访问父类的成员方法和变量。

_1. super 调用父类构造方法_

=super= 关键字可以在子类的构造方法中显式地调用父类的构造方法，基本格式如下：

#+BEGIN_EXAMPLE
super(parameter-list);
#+END_EXAMPLE

其中， =parameter-list= 指定了父类构造方法中的所有参数。 *=super()= 必须在子类构造方法的方法体的第一行。*

我们来看一段代码，声明父类 Person 和子类 Student ，在 Person 类中定义一个带有参数的构造方法，如下：

#+BEGIN_SRC java -n
  public class Person {
      public Person(String name) {

      }
  }
  public class Student extends Person {

  }
#+END_SRC

上述代码会出现 =Student= 类的编译错误，提示必须显式定义构造方法，错误信息如下：

#+BEGIN_EXAMPLE
Implicit super constructor Person() is undefined for default constructor. Must define an explicit constructor.
#+END_EXAMPLE

为什么会出现这个错误呢？

本例中，JVM 默认给 =Student= 类加了一个无参构造方法，而在这个方法中默认调用了 =super()= ，但是 Person 类中并不存在该构造方法，所以会编译错误。

#+BEGIN_QUOTE
*小结一下：\\
如果一个类中没有写任何的构造方法，JVM 会生成一个默认的无参构造方法。在继承关系中，由于在子类的构造方法中，第一条语句默认为调用父类的无参构造方法（即默认为 =super()= ，一般这行代码省略了）。所以当在父类中定义了有参构造方法，但是没有定义无参构造方法时，编译器会强制要求我们定义一个相同参数类型的构造方法。
#+END_QUOTE

_2. super 访问父类成员_

当子类的成员变量或方法与父类同名时，可以使用 =super= 关键字来访问。

如果子类重写了父类的某一个方法，即子类和父类有相同的方法定义，但是有不同的方法体，此时，我们可能通过 =super= 来调用父类里面的这个方法。

*使用 super 访问父类中的成员与 this 关键字的使用类似，只不过它引用的是子类的父类* ，语法格式如下：

#+BEGIN_EXAMPLE
super.member
#+END_EXAMPLE

_3. super 和 this 的区别_

=this= 指的是当前对象的引用， =super= 是当前对象的父对象的引用。如果构造方法的第一行代码不是 =this()= 和 =super()= ，则系统会默认添加 =super()= 。

关于 Java 中 =super= 和 =this= 关键字的异同，可简单总结为以下几条：

（1）子类和父类中变量或方法名称相同时，用 =super= 关键字来访问。可以理解为 =super= 是指向自己父类对象的一个指针，在子类中调用父类的构造方法。

（2） =this= 是自身的一个对象，代表对象本身，可以理解为 =this= 是指向对象本身的一个指针，在同一个类中调用其它方法。

（3） =this= 和 =super= 不能同时出现在一个构造方法里面，因为 =this= 必然会调用其它的构造方法，其它构造方法中肯定会有 =super= 语句存在，所以在同一个构造方法里面有相同的语句，就失去了语句的意义，编译器也不会通过。

（4） =this()= 和 =super()= 都指的是对象，所以，均不可以在 =static= 环境中使用，包括 =static= 变量、 =static= 方法和 =static= 语句块。

（5）从本质上讲， =this= 是一个指向对象本身的指针，然而 =super= 是一个 Java 关键字。

*** 对象类型转型

将一个类型强制转换成另一个类型的过程被称为 _类型转型_ ，这里所说的 _对象类型转型_ ，是指存在继承关系的对象，不是任意类型的对象。当对不存在继承关系的对象进行强制类型转换时，会抛出 Java 强制类型转换（ =java.lang.ClassCastException= ）异常。
